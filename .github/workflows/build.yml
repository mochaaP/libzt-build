name: Cross Build
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 4"
  push:
    branches:
      - main
    paths-ignore:
      - ".gitignore"
      - "LICENSE"
      - "README.md"
      - ".github/dependabot.yml"
jobs:
  linux:
    name: Linux Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cross compile
        run: |
          docker buildx build . --tag libzt-cross
          docker create --name libzt-cross libzt-cross sh
          docker cp libzt-cross:/dist ./dist-linux
          docker rm libzt-cross

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-linux
          path: dist-linux
  darwin:
    name: macOS Build
    runs-on: macos-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          repository: 'zerotier/libzt'
          ref: 'dev'
          submodules: 'true'
      - name: Setup Ninja
        run: brew install ninja
      - name: Compile
        run: |
          cmake \
          -DBUILD_RELEASE=ON -DRELEASE_OPTIMIZATION="-O3" -DCMAKE_VERBOSE_MAKEFILE="ON"\
          -DBUILD_STATIC_LIB=True -DBUILD_SHARED_LIB=True \
          -DBUILD_EXAMPLES=False -DBUILD_HOST_SELFTEST=False -DALLOW_INSTALL_TARGET=False \
          -H. -Bbuild-amd64 -GNinja

          cmake --build build-amd64

          mkdir dist-darwin
          mkdir dist-darwin/amd64
          mv build-amd64/lib/libzt.a dist-darwin/libzt.amd64.a
          mv build-amd64/lib/libzt.dylib dist-darwin/libzt.amd64.dylib
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-darwin
          path: dist-darwin
  windows:
    name: Windows Build
    runs-on: windows-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          repository: 'zerotier/libzt'
          ref: 'dev'
          submodules: 'true'
      - name: Compile
        run: |
          cmake -Bbuild-x86 -A "Win32" -DCMAKE_VERBOSE_MAKEFILE="ON" -DBUILD_STATIC_LIB=True -DBUILD_SHARED_LIB=True -DBUILD_EXAMPLES=False -DBUILD_HOST_SELFTEST=False -DALLOW_INSTALL_TARGET=False
          cmake -Bbuild-x64 -A "x64" -DCMAKE_VERBOSE_MAKEFILE="ON" -DBUILD_STATIC_LIB=True -DBUILD_SHARED_LIB=True -DBUILD_EXAMPLES=False -DBUILD_HOST_SELFTEST=False -DALLOW_INSTALL_TARGET=False

          cmake --build build-x86 --config Release
          cmake --build build-x64 --config Release

          mkdir dist-windows
          mkdir dist-windows/x86
          mkdir dist-windows/x64
          mv build-x86/lib/Release/* dist-windows/x86/
          mv build-x64/lib/Release/* dist-windows/x64/
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-windows
          path: |
            dist-windows/**/zt.*
            dist-windows/**/zt-shared.*
  publish:
    runs-on: ubuntu-latest
    needs:
      - linux
      - darwin
      - windows
    steps:
      - name: Set variables
        run: |
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "RELEASE_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        shell: bash

      - name: Download artifacts (Linux)
        uses: actions/download-artifact@v3
        with:
          name: dist-linux
          path: dist-linux
      - name: Download artifacts (Darwin)
        uses: actions/download-artifact@v3
        with:
          name: dist-darwin
          path: dist-darwin
      - name: Download artifacts (Windows)
        uses: actions/download-artifact@v3
        with:
          name: dist-windows
          path: dist-windows
      
      - name: Organize output
        run: |
          ls -Rlah
          mkdir publish
          mkdir publish/linux
          mkdir publish/darwin
          mkdir publish/windows
          mv dist-linux/* publish/linux/
          mv dist-darwin/* publish/darwin/
          mv dist-windows/* publish/windows/
      - name: Git push assets to "release" branch
        run: |
          cd publish || exit 1
          git init
          git config --local user.name "mcha0"
          git config --local user.email "git-bot@mochaa.ws"
          git checkout -b release
          git add -A
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add cross "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u cross release
